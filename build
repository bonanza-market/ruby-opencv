#!/usr/bin/env ruby

# This script will install the native extension locally in a bundler-compatible way
# without one having to check in -> push -> bundle update constantly.
#
# When you run this, it will compile the extension, then copy the result it into the lib directory
# like a good gem.
#
# The only other thing you need to do is manually declare this gem to be the gem's local directory
# in the Gemfile of your Rails project.
#
# To include debug symbols, add the "debug" command line option. e.g. when vendored:
#   > vendor/gems/ruby-opencv/build debug
#
# To verify that debug symbols are included, check if readelf has any output:
#   > readelf --debug-dump=decodedline vendor/gems/extensions/x86_64-linux/2.1.0/ruby-opencv-0.0.13.20140330211753/opencv.so | head
#

require 'rubygems'
require 'fileutils'

OPENCV_VERSION = "2.4.13"

require_relative 'bootstrapper'
RubyOpenCVBootstrapper.check_opencv_version(OPENCV_VERSION, error: true)

is_debug_mode = ARGV.first.to_s == 'debug'

# This file can be run from a dedicated ruby-opencv directory, or from a vendored directory. In the latter case, it's
# not necessary to build or install the gem itself, just the native extension
is_vendored = !Dir.pwd.end_with?('ruby-opencv')

if is_vendored
  RubyOpenCVBootstrapper.build_native_extension(OPENCV_VERSION, debug: is_debug_mode)
else
  target_gemset_name = 'bonz-imagetools'
  
  gem_spec_filename = 'ruby-opencv.gemspec'
  gem_spec_path = "#{ File.dirname(__FILE__) }/#{ gem_spec_filename }"
  gem_spec = Gem::Specification.load(gem_spec_path)
  gem_filename = "#{ gem_spec.name }-#{ gem_spec.version }.gem"

  # Build the gem
  puts "=> Building #{ gem_spec_filename }"
  unless system("gem build #{ gem_spec_filename }")
    puts '=> Gem build failed'
    exit(1)
  end

  # Install gem in target RVM gemset
  puts "=> Installing #{ gem_filename }"
  unless system("#{ ENV['rvm_path'] }/wrappers/ruby-#{ RUBY_VERSION }@#{ target_gemset_name }/gem install #{ gem_filename }")
    puts '=> Gem install failed'
    exit(1)
  end
end

puts '=> Done'
