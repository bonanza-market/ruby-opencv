#!/usr/bin/env ruby

# This script will install the native extension locally in a bundler-compatible way
# without one having to check in -> push -> bundle update constantly.
#
# When you run this, it will compile the extension, then copy the result it into the lib directory
# like a good gem.
#
# The only other thing you need to do is manually declare this gem to be the gem's local directory
# in the Gemfile of your Rails project.

target_gemset_name = 'bonz-imagetools'

require 'rubygems'
require 'fileutils'

puts '=> Building extconf...'
build_dir = "#{ File.dirname(__FILE__) }/ext/opencv"
system("cd #{ build_dir } && ruby extconf.rb")

# Co-opting builder.rb from bundler
dest_path = ::File.expand_path('lib/',  File.dirname(__FILE__))
makefile_contents = File.read("#{ build_dir }/Makefile")
makefile_contents = makefile_contents.gsub(/^RUBYARCHDIR\s*=\s*\$[^$]*/, "RUBYARCHDIR = #{ dest_path }")
makefile_contents = makefile_contents.gsub(/^RUBYLIBDIR\s*=\s*\$[^$]*/, "RUBYLIBDIR = #{ dest_path }")
File.write("#{ build_dir }/Makefile", makefile_contents, mode: 'wb')

success = system("cd #{ build_dir } && make")
if success
  if system("cd #{ build_dir } && make install")
    puts '=> Build seems legit.'
  else
    puts '=> Make install returned a non-zero errorcode.'
  end
else
  puts '=> Error running makefile. See above.'
end

gem_spec_filename = 'ruby-opencv.gemspec'
gem_spec = Gem::Specification.load(gem_spec_filename)
gem_filename = "#{ gem_spec.name }-#{ gem_spec.version }.gem"

# Build the gem
puts "=> Building #{ gem_spec_filename }"
unless system("gem build #{ gem_spec_filename }")
  puts '=> Gem build failed'
  exit(1)
end

# Install gem in target RVM gemset
puts "=> Installing #{ gem_filename }"
unless system("#{ ENV['rvm_path'] }/wrappers/ruby-#{ RUBY_VERSION }@#{ target_gemset_name }/gem install #{ gem_filename }")
  puts '=> Gem install failed'
  exit(1)
end

# Copy dynamic library to target RVM gemset
puts '=> Copying opencv.so'
target_gemset_path = ENV['GEM_HOME'].gsub(/@ruby\-opencv/, "@#{ target_gemset_name }")
copy_to = "#{ target_gemset_path }/bundler/gems/extensions/#{ ENV['_system_arch'].downcase }-#{ ENV['_system_type'].downcase }/2.1.0/#{ gem_spec.name }-#{ gem_spec.version }"
FileUtils.mkpath(copy_to)
copy_command = "cp #{ build_dir }/opencv.so #{ copy_to }/opencv.so"
puts "Copying opencv.so: '#{ copy_command }'"
system(copy_command)