#!/usr/bin/env ruby

# This script will install the native extension locally in a bundler-compatible way
# without one having to check in -> push -> bundle update constantly.
#
# When you run this, it will compile the extension, then copy the result it into the lib directory
# like a good gem.
#
# The only other thing you need to do is manually declare this gem to be the gem's local directory
# in the Gemfile of your Rails project.

require 'rubygems'
require 'fileutils'

# This file can be run from a dedicated ruby-opencv directory, or from a vendored directory. In the latter case, it's
# not necessary to build or install the gem itself, just the native extension
is_vendored = !Dir.pwd.end_with?('ruby-opencv')

if is_vendored
  require 'bundler'
  Bundler.require(:default)
  gem_spec = Gem::Specification.find_by_name 'ruby-opencv'
  
  puts '=> Building native extensions'

  # Copied from Gem::Specification#build_extensions
  begin
    # We need to require things in $LOAD_PATH without looking for the
    # extension we are about to build.
    unresolved_deps = Gem::Specification.unresolved_deps.dup
    Gem::Specification.unresolved_deps.clear

    require 'rubygems/config_file'
    require 'rubygems/ext'
    require 'rubygems/user_interaction'
    
    Gem::DefaultUserInteraction.use_ui Gem::ConsoleUI.new do
      builder = Gem::Ext::Builder.new gem_spec
      builder.build_extensions
    end
  end
else
  target_gemset_name = 'bonz-imagetools'
  
  gem_spec_filename = 'ruby-opencv.gemspec'
  gem_spec_path = "#{ File.dirname(__FILE__) }/#{ gem_spec_filename }"
  gem_spec = Gem::Specification.load(gem_spec_path)
  gem_filename = "#{ gem_spec.name }-#{ gem_spec.version }.gem"

# Build the gem
  puts "=> Building #{ gem_spec_filename }"
  unless system("gem build #{ gem_spec_filename }")
    puts '=> Gem build failed'
    exit(1)
  end

# Install gem in target RVM gemset
  puts "=> Installing #{ gem_filename }"
  unless system("#{ ENV['rvm_path'] }/wrappers/ruby-#{ RUBY_VERSION }@#{ target_gemset_name }/gem install #{ gem_filename }")
    puts '=> Gem install failed'
    exit(1)
  end
end

puts '=> Done'
